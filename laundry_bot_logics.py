from default_keyboards import ReplyKeyboard
from ast import literal_eval
import datetime as dt
import requests
import re
import os


class UltimateClassThatContainsEverythingForReply:
    """
    —Ç—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤–æ–æ–±—â–µ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—á–∞—é—Ç –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
    """
    def __init__(self, db, datetime_format, tz, debug_user, debug_bot):
        self.db = db
        self.cursor = None
        self.datetime_format = datetime_format
        self.tz = tz
        self.debug_user = debug_user
        self.debug_bot = debug_bot
        self.is_washing_msg = '–í–µ—â–∏ —Å—Ç–∏—Ä–∞—é—Ç—Å—è ' + u'üçè'
        self.is_drying_msg = '–í–µ—â–∏ —Å—É—à–∞—Ç—Å—è ' + u'üçè'
        self.completed_washing_msg = '–í–µ—â–∏ –ø–æ—Å—Ç–∏—Ä–∞–Ω—ã ' + u'üçé'
        self.completed_drying_msg = '–í–µ—â–∏ –≤—ã—Å—É—à–µ–Ω—ã ' + u'üçé'
        self.parameters_intervals = '–∏–Ω—Ç–µ—Ä–≤–∞–ª—ã'
        self.parameters_s_time = '–≤—Ä–µ–º—è —Ç–∏—à–∏–Ω—ã'
        self.command_list = ('cancel', 'add_inactive_time', 'delete_inactive_time', 'list_inactive_time',
                             'set_washing_time', 'set_drying_time', 'set_interval_washed',
                             'set_interval_dried', 'help', 'status', 'stop')

    def report_error(self, comment, error):
        text = f'service message\n–≥–¥–µ: {comment}\n—á—Ç–æ: {error}'
        requests.get(f'https://api.telegram.org/bot{self.debug_bot}/sendMessage?chat_id={self.debug_user}&text={text}')

    def generate_main_reply_kb(self, user):
        self.cursor.execute("SELECT part_0_id, part_1_id FROM user_status WHERE user = ?", (user,))
        part_1_id, part_2_id = self.cursor.fetchall()[0]

        btn_texts, btn_params = [], []
        if part_1_id is None:
            btn_texts.append(self.is_washing_msg)
            btn_params.append({'color': 'primary'})
        else:
            btn_texts.append(self.completed_washing_msg)
            btn_params.append({'color': 'negative'})
        if part_2_id is None:
            btn_texts.append(self.is_drying_msg)
            btn_params.append({'color': 'primary'})
        else:
            btn_texts.append(self.completed_drying_msg)
            btn_params.append({'color': 'negative'})

        # return [[btn_texts, [self.parameters_intervals, self.parameters_s_time]],
        #         [btn_params, [{'color': 'secondary'} for _ in range(2)]]]
        return [[btn_texts, ["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"]], [btn_params, [{'color': 'secondary'}]]]

    def convert_inactive_hours_text_to_list(self, text):
        week_planner = [[] for _ in range(7)]

        for row in text:
            row = re.sub('[^A-Za-z0-9:]', ' ', row)
            row = re.sub(r'\s+', ' ', row)
            while ': ' in row or ' :' in row:
                row.replace(' :', ':')
                row.replace(': ', ':')
            try:
                row = row.split()
                t1 = row[-2].split(':')
                t2 = row[-1].split(':')
            except IndexError:
                break

            t1 = [int(i) for i in t1]
            t2 = [int(i) for i in t2]
            dt1, dt2 = dt.time(hour=t1[0], minute=t1[1]), dt.time(hour=t2[0], minute=t2[1])

            if len(row) == 3:  # –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è –¥–æ–±–∞–≤–∏–ª–∏
                if 1 <= int(row[0]) <= 7:
                    if dt1 > dt2:
                        week_planner[int(row[0]) - 1].append(((t1[0], t1[1]), (23, 59)))
                        week_planner[int(row[0]) % 7].append(((0, 0), (t2[0], t2[1])))
                    else:
                        week_planner[int(row[0]) - 1].append(((t1[0], t1[1]), (t2[0], t2[1])))
                else:
                    raise ValueError('WrongFormat')

            elif len(row) == 4:
                if int(row[0]) < 1:
                    row[0] = '1'
                elif int(row[0]) > 7:
                    row[0] = '7'
                if int(row[1]) < 1:
                    row[1] = '1'
                elif int(row[1]) > 7:
                    row[1] = '7'

                days_ow = []

                if int(row[0]) > int(row[1]):
                    days_ow.extend(range(int(row[0]), 8))
                    days_ow.extend(range(1, int(row[1]) + 1))
                else:
                    days_ow.extend(range(int(row[0]), int(row[1]) + 1))

                for i in days_ow:
                    if dt1 > dt2:
                        week_planner[i - 1].append(((t1[0], t1[1]), (23, 59)))
                        week_planner[i % 7].append(((0, 0), (t2[0], t2[1])))
                    else:
                        week_planner[i - 1].append(((t1[0], t1[1]), (t2[0], t2[1])))
            else:
                raise ValueError('WrongFormat')

        return week_planner

    def format_text_from_list(self, rows):
        if len(rows) == 0 or rows[0] == '':
            return None, None

        cnt = 1
        text_to_db, text_to_user = '', '<code>'

        num_size = 1
        for row in rows:
            if row != '\n' and row != '':
                substr = row[:row.find(' ')]
                if len(substr) > 2:
                    num_size = 3
                    break

        for row in rows:
            if row != '\n' and row != '':
                space_pos = row.find(' ')
                dow = row[:space_pos]
                timeline = row[(space_pos + 1):]
                text_to_db += f'{dow} {timeline}\n'
                dow = dow.ljust(num_size)
                text_to_user += f'{str(cnt).zfill(len(str(len(rows))))}. {dow} {timeline}\n'
                cnt += 1

        text_to_user += '</code>'

        return text_to_user, text_to_db

    def parse_inactive_hours_adding(self, input_m):
        input_m = input_m.split('\n')
        human_view = []
        week_planner = [[] for _ in range(7)]

        for row in input_m:
            row = re.sub('[^A-Za-z0-9:]', ' ', row)
            row = re.sub(r'\s+', ' ', row)
            while ': ' in row or ' :' in row:
                row.replace(' :', ':')
                row.replace(': ', ':')

            row = row.split()
            t1 = row[-2].split(':')
            t2 = row[-1].split(':')
            t1 = [int(i) for i in t1]
            t2 = [int(i) for i in t2]
            dt1, dt2 = dt.time(hour=t1[0], minute=t1[1]), dt.time(hour=t2[0], minute=t2[1])

            if len(row) == 3 or row[0] == row[1]:  # –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è –¥–æ–±–∞–≤–∏–ª–∏
                # bot.send_message(debug_user, str(row) + str(len(row)))
                if 1 <= int(row[0]) <= 7:
                    # bot.send_message(debug_user, f'{row[0]} {row[-2]}-{row[-1]}')
                    human_view.append(f'{row[0]} {row[-2]}-{row[-1]}')
                    if dt1 > dt2:
                        week_planner[int(row[0]) - 1].append(((t1[0], t1[1]), (23, 59)))
                        week_planner[int(row[0]) % 7].append(((0, 0), (t2[0], t2[1])))
                    else:
                        week_planner[int(row[0]) - 1].append(((t1[0], t1[1]), (t2[0], t2[1])))
                else:
                    raise ValueError('Wrong format')

            elif len(row) == 4:
                if int(row[0]) < 1:
                    row[0] = '1'
                elif int(row[0]) > 7:
                    row[0] = '7'
                if int(row[1]) < 1:
                    row[1] = '1'
                elif int(row[1]) > 7:
                    row[1] = '7'

                human_view.append(f'{row[0]}-{row[1]} {row[-2]}-{row[-1]}')

                days_ow = []

                if int(row[0]) > int(row[1]):
                    days_ow.extend(range(int(row[0]), 8))
                    days_ow.extend(range(1, int(row[1]) + 1))
                else:
                    days_ow.extend(range(int(row[0]), int(row[1]) + 1))

                for i in days_ow:
                    if dt1 > dt2:
                        week_planner[i - 1].append(((t1[0], t1[1]), (23, 59)))
                        week_planner[i % 7].append(((0, 0), (t2[0], t2[1])))
                    else:
                        week_planner[i - 1].append(((t1[0], t1[1]), (t2[0], t2[1])))

            else:
                raise ValueError('Wrong format')

        return human_view, week_planner

    def timer_set(self, action_type, user):
        now = (dt.datetime.now() + dt.timedelta(hours=self.tz)).strftime(self.datetime_format)

        self.cursor.execute(f"SELECT part_{action_type}_id FROM user_status WHERE user = ?", (user,))
        cur_action_id = self.cursor.fetchone()[0]

        if cur_action_id is not None:
            reply_text = '–¢–∞–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
            reply_kb = self.generate_main_reply_kb(user)
            return reply_text, reply_kb

        self.cursor.execute(f"SELECT default_next_time_minutes_{action_type} FROM user_status WHERE user = ?",
                            (user,))
        awaiting_time = self.cursor.fetchall()[0][0]
        self.cursor.execute(f"SELECT default_interval_{action_type} FROM user_status WHERE user = ?", (user,))
        interval = self.cursor.fetchall()[0][0]
        next_message = dt.datetime.now() + dt.timedelta(hours=self.tz, minutes=awaiting_time)
        next_message = next_message.strftime(self.datetime_format)
        self.cursor.execute("INSERT INTO actions (user, type, last_message, next_message) values (?, ?, ?, ?)",
                            (user, action_type, now, next_message))
        self.cursor.execute("SELECT last_insert_rowid()")
        action_id = self.cursor.fetchall()[0][0]

        self.cursor.execute(f"UPDATE user_status SET part_{action_type}_id = ? WHERE user = ?", (action_id, user))

        if action_type:
            def_command = 'set_drying_time, –∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª /set_interval_dried'
        else:
            def_command = 'set_washing_time, –∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª /set_interval_washed'
        
        reply_text = f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n" \
                     f"–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {awaiting_time} –º–∏–Ω—É—Ç " \
                     f"(–µ—Å–ª–∏ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏—Ç –≤—Ä–µ–º—è —Ç–∏—à–∏–Ω—ã), –∑–∞—Ç–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ {interval} –º–∏–Ω—É—Ç\n\n" \
                     f"<i>–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /{def_command}</i>"
        reply_kb = self.generate_main_reply_kb(user)

        self.db.commit()
        return reply_text, reply_kb
    
    def timer_stop(self, action_type, user):
        self.cursor.execute(f"SELECT part_{action_type}_id FROM user_status WHERE user = ?", (user,))
        action_id = self.cursor.fetchall()[0][0]

        if action_id is None:
            reply_text = '–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ'
            reply_kb = self.generate_main_reply_kb(user)
            return reply_text, reply_kb

        self.cursor.execute("DELETE FROM actions WHERE id = ?", (action_id,))
        self.cursor.execute(f"UPDATE user_status SET part_{action_type}_id = NULL WHERE user = ?", (user,))

        reply_text = '–ì–æ—Ç–æ–≤–æ'
        reply_kb = self.generate_main_reply_kb(user)

        self.db.commit()
        return reply_text, reply_kb

    def state_0_instructions(self, user, text):
        if text.lower() in self.is_washing_msg.lower():
            reply_text, reply_kb = self.timer_set(0, user)
        elif text.lower() in self.is_drying_msg.lower():
            reply_text, reply_kb = self.timer_set(1, user)
        elif text.lower() in self.completed_washing_msg.lower():
            reply_text, reply_kb = self.timer_stop(0, user)
        elif text.lower() in self.completed_drying_msg.lower():
            reply_text, reply_kb = self.timer_stop(1, user)
        else:
            reply_text, reply_kb = 'a?', None
        return reply_text, reply_kb

    def state_10_instructions(self, user, text, user_state=True):
        r = re.sub('[^0-9]', '', text)

        if r != '':
            new_time = int(r)

            if user_state:
                self.cursor.execute("UPDATE user_status SET default_next_time_minutes_0 = ? WHERE user = ?",
                                    (new_time, user))
            else:
                self.cursor.execute("UPDATE user_status SET default_interval_0 = ? WHERE user = ?", (new_time, user))

            reply_text = '–ì–æ—Ç–æ–≤–æ'
            reply_kb = self.generate_main_reply_kb(user)

            self.cursor.execute("UPDATE user_status SET status = 0 WHERE user = ?", (user,))
            self.db.commit()
        else:
            reply_text = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö'
            reply_kb = None

        return reply_text, reply_kb

    def state_40_instructions(self, user, text):
        return self.state_10_instructions(user, text, user_state=False)

    def state_15_instructions(self, user, text, user_state=True):
        r = re.sub('[^0-9]', ' ', text)
        r = re.sub(r'\s+', ' ', r)
        r = r.split()

        if not r:
            reply_text = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö –∏ –º–∏–Ω—É—Ç–∞—Ö (–∏–ª–∏ —Ç–æ–ª—å–∫–æ —á–∞—Å–∞—Ö)'
            return reply_text, None

        if len(r) <= 2:
            if len(r) == 1:
                new_time = int(r[0]) * 60
            else:
                new_time = int(r[0]) * 60 + int(r[1])

            if user_state:
                self.cursor.execute("UPDATE user_status SET default_next_time_minutes_1 = ? WHERE user = ?",
                                    (new_time, user))
            else:
                self.cursor.execute("UPDATE user_status SET default_interval_1 = ? WHERE user = ?", (new_time, user))

            self.cursor.execute("UPDATE user_status SET status = 0 WHERE user = ?", (user,))

            reply_text = '–ì–æ—Ç–æ–≤–æ'
            reply_kb = self.generate_main_reply_kb(user)

        else:
            reply_text = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö –∏ –º–∏–Ω—É—Ç–∞—Ö (–∏–ª–∏ —Ç–æ–ª—å–∫–æ —á–∞—Å–∞—Ö)'
            reply_kb = None

        self.db.commit()
        return reply_text, reply_kb

    def state_45_instructions(self, user, text):
        return self.state_15_instructions(user, text, user_state=False)

    def state_30_instructions(self, user, text):
        input_text = os.linesep.join([s for s in text.splitlines() if s])
        try:
            h_form, l_form = self.parse_inactive_hours_adding(input_text)
        except:
            return '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ', None

        # —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Ñ–æ—Ä–º–∞
        self.cursor.execute("SELECT inactive_hours_text FROM user_status WHERE user = ?", (user,))
        old_text = self.cursor.fetchall()[0][0]
        if old_text is None or old_text == '\n':
            text, ttdb = self.format_text_from_list(h_form)
        else:
            text, ttdb = self.format_text_from_list((old_text + '\n' + '\n'.join(h_form)).split('\n'))

        # —Ñ–æ—Ä–º–∞ –¥–ª—è –º–∞—à–∏–Ω—ã
        self.cursor.execute("SELECT inactive_hours FROM user_status WHERE user = ?", (user,))
        week = self.cursor.fetchall()[0][0]
        if week is None:
            week = [[] for _ in range(7)]
        else:
            week = literal_eval(week)
        for i in range(7):
            week[i].extend(l_form[i])
        week = str(week)
        self.cursor.execute("UPDATE user_status SET inactive_hours = ? WHERE user = ?", (week, user))
        self.cursor.execute("UPDATE user_status SET status = 0 WHERE user = ?", (user,))

        ttdb = os.linesep.join([s for s in ttdb.splitlines() if s])

        self.cursor.execute("UPDATE user_status SET inactive_hours_text = ? WHERE user = ?", (ttdb, user))

        reply_text = '–ì–æ—Ç–æ–≤–æ\n\n–°–µ–π—á–∞—Å —Å–ø–∏—Å–æ–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n' + text
        reply_kb = self.generate_main_reply_kb(user)

        self.db.commit()
        return reply_text, reply_kb

    def state_35_instructions(self, user, text):
        r = re.sub('[^0-9]', ' ', text)
        r = re.sub(r'\s+', ' ', r)
        r = r.split()
        r = [int(i) for i in r]

        self.cursor.execute("SELECT inactive_hours_text FROM user_status WHERE user = ?", (user,))
        try:
            row = self.cursor.fetchall()[0][0]
            rows = [s for s in row.splitlines() if s]

        except AttributeError:
            reply_text = '–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å:\n<i>--–ø—É—Å—Ç–æ--</i>'
            reply_kb = self.generate_main_reply_kb(user)
            self.cursor.execute("UPDATE user_status SET status = 0 WHERE user = ?", (user,))
            self.db.commit()
            return reply_text, reply_kb

        nothing_changed = True
        ids = list(range(len(rows)))
        for i in r:
            if (i - 1) in ids:
                ids.remove(i - 1)
                nothing_changed = False
        if nothing_changed:
            return '–£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å, –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ', None

        result_message = [rows[i] for i in ids]

        if not len(result_message):
            reply_text = '–ì–æ—Ç–æ–≤–æ\n\n–°–µ–π—á–∞—Å —Å–ø–∏—Å–æ–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n<i>--–ø—É—Å—Ç–æ--</i>'
            reply_kb = self.generate_main_reply_kb(user)

            week = str([[] for _ in range(7)])
            self.cursor.execute("UPDATE user_status SET inactive_hours = ? WHERE user = ?", (week, user))
            self.cursor.execute("UPDATE user_status SET inactive_hours_text = NULL WHERE user = ?", (user,))
            self.cursor.execute("UPDATE user_status SET status = 0 WHERE user = ?", (user,))
            self.db.commit()

            return reply_text, reply_kb

        week = self.convert_inactive_hours_text_to_list(result_message)

        week = str(week)
        self.cursor.execute("UPDATE user_status SET inactive_hours = ? WHERE user = ?", (week, user))

        msg, ttdb = self.format_text_from_list(result_message)
        msg = os.linesep.join([s for s in msg.splitlines() if s])
        ttdb = os.linesep.join([s for s in ttdb.splitlines() if s])
        self.cursor.execute("UPDATE user_status SET inactive_hours_text = ? WHERE user = ?", (ttdb, user))
        self.cursor.execute("UPDATE user_status SET status = 0 WHERE user = ?", (user,))

        reply_text = '–ì–æ—Ç–æ–≤–æ\n\n–°–µ–π—á–∞—Å —Å–ø–∏—Å–æ–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n' + msg
        reply_kb = self.generate_main_reply_kb(user)

        self.db.commit()
        return reply_text, reply_kb

    def state_99_instructions(self, user, text):
        if text.lower() == '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
            reply_text = '–ì–æ—Ç–æ–≤–æ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å (/start)'
            reply_kb = None
            self.cursor.execute("DELETE FROM user_status WHERE user = ?", (user,))
            self.cursor.execute("DELETE FROM actions WHERE user = ?", (user,))
        else:
            reply_text = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ'
            reply_kb = self.generate_main_reply_kb(user)
            self.cursor.execute("UPDATE user_status SET status = 0 WHERE user = ?", (user,))

        self.db.commit()
        return reply_text, reply_kb

    def start_command(self, user, source):
        self.cursor.execute("INSERT INTO user_status (user, status, app) values (?, ?, ?)", (user, 0, source))
        self.db.commit()

        reply_text = '–ü—Ä–∏–≤–µ—Ç!\n–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã—Ç—å –æ –≤–µ—â–∞—Ö –≤ –ø—Ä–∞—á–µ—á–Ω–æ–π\n\n' \
                     '–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç—É—Ç –µ—Å—Ç—å —Ç–∞–∫–∞—è —à—Ç—É–∫–∞, –∫–∞–∫ –≤—Ä–µ–º—è —Ç–∏—à–∏–Ω—ã ' \
                     '(—Å–ø–∏—Å–æ–∫ –∏–º–µ–µ—Ç –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –µ–≥–æ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—É—Ç: /list_inactive_time)\n' \
                     '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ä–∞–∑–¥–µ–ª–æ–º /help, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥'
        reply_kb = [[[self.is_washing_msg, self.is_drying_msg], ['–Ω–∞—Å—Ç—Ä–æ–π–∫–∏']],
                    [[{'color': 'primary'} for _ in range(2)], [{'color': 'secondary'}]]]

        return reply_text, reply_kb

    def cancel_command(self, user):
        reply_text = '–ì–æ—Ç–æ–≤–æ'
        reply_kb = self.generate_main_reply_kb(user)

        self.cursor.execute("UPDATE user_status SET status = 0 WHERE user = ?", (user,))
        self.db.commit()

        return reply_text, reply_kb

    def add_inactive_time_command(self, user):
        reply_text = '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö ' \
                     '–ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–∑—Ü—É (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ - –æ–¥–∏–Ω –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫):\n' \
                     '<code>–¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏_1 –¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏_2 –≤—Ä–µ–º—è_1 –≤—Ä–µ–º—è_2</code>\n' \
                     '–¢—É—Ç <code>–¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏</code> - —Ü–∏—Ñ—Ä–∞ ' \
                     '–æ—Ç 1 –¥–æ 7 (–æ—Ç –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –¥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è). ' \
                     '–ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏, ' \
                     '<code>–¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏_2</code> –º–æ–∂–Ω–æ –Ω–µ –ø–∏—Å–∞—Ç—å\n' \
                     '<code>–í—Ä–µ–º—è</code> –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ß–∞—Å—ã:–ú–∏–Ω—É—Ç—ã</code>\n' \
                     '–ù–∞–ø—Ä–∏–º–µ—Ä, <code>7 5 22:30 5:59</code> (–≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, ' \
                     '–≤—Ç–æ—Ä–Ω–∏–∫, ..., –ø—è—Ç–Ω–∏—Ü—É —Å 22:30 —ç—Ç–æ–≥–æ –¥–Ω—è –¥–æ 5:59 —Å–ª–µ–¥—É—é—â–µ–≥–æ)\n' \
                     '–∏–ª–∏ <code>1 6 20:00 21:00</code> (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-—Å—É–±–±–æ—Ç–∞ —Å 20:00 –¥–æ 21:00)'
        reply_kb = ReplyKeyboard.cancel.copy()

        self.cursor.execute("UPDATE user_status SET status = 30 WHERE user = ?", (user,))

        return reply_text, reply_kb

    def delete_inactive_time_command(self, user):
        self.cursor.execute("SELECT inactive_hours_text FROM user_status WHERE user = ?", (user,))

        try:
            row = self.cursor.fetchall()[0][0]
            rows = [s for s in row.splitlines() if s]
        except AttributeError:
            self.cursor.execute("UPDATE user_status SET status = 0 WHERE user = ?", (user,))
            self.db.commit()
            return '–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å:\n<i>--–ø—É—Å—Ç–æ--</i>', None

        text, ttdb = self.format_text_from_list(rows)

        if text is None:
            self.cursor.execute("UPDATE user_status SET status = 0 WHERE user = ?", (user,))
            self.db.commit()
            return '–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å:\n<i>--–ø—É—Å—Ç–æ--</i>', None

        reply_text = '–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤ –≤—Ä–µ–º–µ–Ω–∏, ' \
                     '–Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä(–∞) —Å—Ç—Ä–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞:\n' + text
        reply_kb = ReplyKeyboard.cancel.copy()
        reply_kb[0] = [[str(x) for x in list(range(1, len(rows) + 1 if len(rows) <= 5 else 6))]] + reply_kb[0]
        print(reply_kb[0], flush=True)
        reply_kb[1] = [[{'color': 'secondary'} for _ in range(len(rows) if len(rows) <= 5 else 5)]] + reply_kb[1]

        self.cursor.execute("UPDATE user_status SET status = 35 WHERE user = ?", (user,))
        self.db.commit()

        return reply_text, reply_kb

    def list_inactive_time_command(self, user):
        self.cursor.execute("SELECT inactive_hours_text FROM user_status WHERE user = ?", (user,))

        try:
            row = self.cursor.fetchall()[0][0]
            rows = [s for s in row.splitlines() if s]
        except AttributeError:
            return '–°–µ–π—á–∞—Å —Å–ø–∏—Å–æ–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n<i>--–ø—É—Å—Ç–æ--</i>', None

        text, ttdb = self.format_text_from_list(rows)
        reply_text = '–°–µ–π—á–∞—Å —Å–ø–∏—Å–æ–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n' + text

        return reply_text, None

    def set_washing_time_command(self, user):
        self.cursor.execute("SELECT default_next_time_minutes_0 FROM user_status WHERE user = ?", (user,))
        cur = self.cursor.fetchall()[0][0]

        reply_text = f'–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å—Ç–∏—Ä–∫–µ (–≤ –º–∏–Ω—É—Ç–∞—Ö)\n' \
                     f'–ó–Ω–∞—á–µ–Ω–∏–µ —Å–µ–π—á–∞—Å: {str(cur)} –º–∏–Ω—É—Ç\n\n' \
                     f'<i>–¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º</i>'
        reply_kb = ReplyKeyboard.washing_time.copy()


        self.cursor.execute("UPDATE user_status SET status = 10 WHERE user = ?", (user,))
        self.db.commit()

        return reply_text, reply_kb

    def set_drying_time_command(self, user):
        self.cursor.execute("SELECT default_next_time_minutes_1 FROM user_status WHERE user = ?", (user,))
        cur = self.cursor.fetchall()[0][0]

        reply_text =  f'–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—ã—Å–æ—Ö—à–∏—Ö –≤–µ—â–∞—Ö ' \
                      f'(—á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã, –æ–¥–∏–Ω–æ–∫–æ–µ —á–∏—Å–ª–æ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç–æ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤)\n' \
                      f'–ó–Ω–∞—á–µ–Ω–∏–µ —Å–µ–π—á–∞—Å: {str(cur)} –º–∏–Ω—É—Ç\n\n' \
                      f'<i>–¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º</i>'
        reply_kb = ReplyKeyboard.drying_time.copy()

        self.cursor.execute("UPDATE user_status SET status = 15 WHERE user = ?", (user,))
        self.db.commit()

        return reply_text, reply_kb


    def set_interval_washed_command(self, user):
        self.cursor.execute("SELECT default_interval_0 FROM user_status WHERE user = ?", (user,))
        cur = self.cursor.fetchall()[0][0]

        reply_text = f'–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –æ –ø–æ—Å—Ç–∏—Ä–∞–Ω–Ω—ã—Ö –≤–µ—â–∞—Ö (–≤ –º–∏–Ω—É—Ç–∞—Ö)\n' \
                     f'–ó–Ω–∞—á–µ–Ω–∏–µ —Å–µ–π—á–∞—Å: {str(cur)} –º–∏–Ω—É—Ç\n\n' \
                     f'<i>–Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</i>'
        reply_kb = ReplyKeyboard.interval_washed.copy()

        self.cursor.execute("UPDATE user_status SET status = 40 WHERE user = ?", (user,))
        self.db.commit()

        return reply_text, reply_kb

    def set_interval_dried_command(self, user):
        self.cursor.execute("SELECT default_interval_1 FROM user_status WHERE user = ?", (user,))
        cur = self.cursor.fetchall()[0][0]

        reply_text = f'–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –æ –≤—ã—Å–æ—Ö—à–∏—Ö –≤–µ—â–∞—Ö (—á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã, ' \
                     f'–æ–¥–∏–Ω–æ–∫–æ–µ —á–∏—Å–ª–æ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç–æ –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤)\n' \
                     f'–ó–Ω–∞—á–µ–Ω–∏–µ —Å–µ–π—á–∞—Å: {str(cur)} –º–∏–Ω—É—Ç\n\n' \
                     f'<i>–Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</i>'
        reply_kb = ReplyKeyboard.interval_dried.copy()

        self.cursor.execute("UPDATE user_status SET status = 45 WHERE user = ?", (user,))
        self.db.commit()

        return reply_text, reply_kb

    def help_command(self, user):
        reply_text = '<b>–û–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–º–µ—é—â–∏—Ö—Å—è –∫–æ–º–∞–Ω–¥</b>\n\n' \
                     '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö:\n' \
                     '-- /set_washing_time - –≤—Ä–µ–º—è, –æ—Ç–≤–æ–¥–∏–º–æ–µ –Ω–∞ —Å—Ç–∏—Ä–∫—É (—Ç. –µ. –≤—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)\n' \
                     '-- /set_drying_time - –≤—Ä–µ–º—è, –æ—Ç–≤–æ–¥–∏–º–æ–µ –Ω–∞ —Å—É—à–∫—É –≤–µ—â–µ–π (—Ç. –µ. –≤—Ä–µ–º—è –¥–æ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)\n' \
                     '-- /set_interval_washed - –≤—Ä–µ–º—è –º–µ–∂–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –æ ' \
                     '–ø–æ—Å—Ç–∏—Ä–∞–≤—à–∏—Ö—Å—è –≤–µ—â–∞—Ö (—Ç. –µ. –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)\n' \
                     '-- /set_interval_dried - –≤—Ä–µ–º—è –º–µ–∂–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –æ ' \
                     '–≤–µ—â–∞—Ö –≤ —Å—É—à–∏–ª–∫–µ (—Ç. –µ. –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è)\n' \
                     '\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏, –≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n' \
                     '-- /list_inactive_time - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫\n' \
                     '-- /add_inactive_time - –¥–æ–±–∞–≤–∏—Ç—å\n' \
                     '-- /delete_inactive_time - —É–¥–∞–ª–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ\n' \
                     '\n–ü—Ä–æ—á–µ–µ:\n' \
                     '-- /stop - —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë'

        if user.endswith('vk'):
            reply_text += '\n\n(P.S. –≤ –≤–∫ –≤—Å–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏, –µ—Å–ª–∏ —Ç—ã–∫–Ω—É—Ç—å –∫–Ω–æ–ø–∫—É "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏")'

        return reply_text, None

    def contact_us_command(self, user):
        reply_text = '–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏—Ç —á–µ–ª–æ–≤–µ–∫'
        reply_kb = ReplyKeyboard.cancel.copy()

        self.cursor.execute("UPDATE user_status SET status = 20 WHERE user = ?", (user,))
        self.db.commit()

        return reply_text, reply_kb

    def status_command(self, user):
        self.cursor.execute("SELECT last_check FROM info")
        last_check = self.cursor.fetchone()[0]

        total_users = vk_users = tg_users = last_n_days_vk = last_n_days_tg = 0

        self.cursor.execute("SELECT user, last_used FROM user_status")
        for user in self.cursor.fetchall():
            total_users += 1
            user_id, app = user[0].split('_')

            if app == 'vk':
                vk_users += 1
            elif app == 'tg':
                tg_users += 1
                
            if user[1]:
                last_used = dt.datetime.strptime(user[1], self.datetime_format)
                if last_used > dt.datetime.now() - dt.timedelta(days=20):
                    if app == 'vk':
                        last_n_days_vk += 1
                    elif app == 'tg':
                        last_n_days_tg += 1

        self.cursor.execute("SELECT Count() FROM actions")
        actions_count = self.cursor.fetchone()[0]

        reply_text = f'–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {last_check}\n' \
                     f'–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {actions_count}\n' \
                     f'Vk / tg / total: {vk_users} / {tg_users} / {vk_users + tg_users}\n' \
                     f'–ò–∑ –Ω–∏—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –¥–Ω–µ–π: ' \
                     f'{last_n_days_vk} / {last_n_days_tg} / {last_n_days_vk + last_n_days_tg}'

        return reply_text, None

    def stop_command(self, user):
        reply_text = '–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Ç–µ—Ä—è—é—Ç—Å—è –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –±–µ–∑ –∫–∞–≤—ã—á–µ–∫'

        self.cursor.execute("UPDATE user_status SET status = 99 WHERE user = ?", (user,))
        self.db.commit()

        return reply_text, [[], []]

    def interact(self, user, message_text, source, cursor):
        user = str(user) + '_' + source
        self.cursor = cursor
        try:
            user_state = self.cursor.execute("SELECT status FROM user_status WHERE user = ?", (user,)).fetchone()[0]
        except:
            user_state = None

        self.cursor.execute("UPDATE user_status SET last_used = ? WHERE user = ?",
                            (dt.datetime.now().strftime(self.datetime_format), user))
        self.db.commit()

        reply_text, reply_kb = '–∞?', None

        # /start
        if user_state is None:
            return self.start_command(user, source)
        elif message_text.startswith('/start'):
            reply_text = '–£–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º'
            return reply_text, None

        # /commands
        if message_text.startswith('/'):
            command = message_text[1:] if message_text.find(' ') == -1 else message_text[1:message_text.find(' ')]
            if command in self.command_list:
                try:
                    reply_text, reply_kb = eval(f'self.{command}_command(user)')
                except Exception as error:
                    self.report_error(f'–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {command}', error)
            else:
                reply_text = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù—É–∂–Ω–∞ /help?'

        else:
            tmp = message_text.lower()
            tmp = tmp.replace(' ', '')
            if tmp in ('–æ—Ç–º–µ–Ω–∏—Ç—å–≤—ã–±–æ—Ä', '–æ—Ç–º–µ–Ω–∏—Ç—å', '–æ—Ç–º–µ–Ω–∞', 'cancel', 'stopit', '—Å—Ç–æ–ø', '–æ—Ç–∫–∞–∑', '–¥–æ—Å—Ç–∞–ª'):
                reply_text, reply_kb = self.cancel_command(user)
            elif tmp == self.parameters_intervals.replace(' ', ''):
                reply_text = '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π'
                reply_kb = ReplyKeyboard.intervals_inline.copy()
            elif tmp == self.parameters_s_time.replace(' ', ''):
                reply_text = '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ç–∏—à–∏–Ω—ã'
                reply_kb = ReplyKeyboard.inactive_time_inline.copy()
            elif tmp in ('–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', '–ø–∞—Ä–∞–º–µ—Ç—Ä—ã', 'settings', 'parameters'):
                reply_text = '–∫–∞—Ç–µ–≥–æ—Ä–∏—è'
                reply_kb = ReplyKeyboard.main_settings_inline.copy()
            else:
                try:
                    reply_text, reply_kb = eval(f'self.state_{user_state}_instructions(user, message_text)')
                except Exception as error:
                    self.report_error(f'–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è {user_state}', error)

        return reply_text, reply_kb
